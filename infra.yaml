# CloudFormation template that deploys SNS topic, Lambda Function, EventBridge
AWSTemplateFormatVersion: '2010-09-09'
Description: Troubleshooting Cloudformation Failures with Generative AI

Parameters:
  EmailAddress:
    Type: String
    Description: Email address of the subscriber
  FunctionName:
    Type: String
    Default: stackFailureAssistant
  Runtime:
    Type: String
    Default: python3.10

Resources:
# SNS Email Topic
  SNSEmailTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref EmailAddress
          Protocol: email
      Tags:
        - Key: project
          Value: troubleshooting-cloudformation-failures

# Lambda Role that has invokes Bedrock and SNS permissions
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${FunctionName}-role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: BedrockInvokePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "bedrock:InvokeModel"
                  - "bedrock:InvokeModelWithResponseStream"
                Resource: "*"
        - PolicyName: SNSPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "sns:Publish"
                Resource: !Ref SNSEmailTopic
      Tags:
        - Key: project
          Value: troubleshooting-cloudformation-failures

# Lambda Layer 
  LambdaBoto3Layer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.10
      Content:
        S3Bucket: lambda-layers-us-west-2-54564546
        S3Key: boto3-bedrock-1-28-57.zip
      Description: Boto3 lambda layer
      LayerName: boto3-lambda-layer
      LicenseInfo: MIT
  
  # Lambda Function that is invoked by EventBridge
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref FunctionName
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: !Ref Runtime
      Code:
        ZipFile: |
          import os
          import boto3
          import json


          TOPIC_ARN = os.environ["TOPIC_ARN"]
          REGION = os.environ["REGION"]


          # Define bedrock
          bedrock = boto3.client(
              service_name="bedrock-runtime",
              region_name=REGION
          )

          sns = boto3.client(
                  service_name="sns",
                  region_name=REGION
              )


          def create_prompt(reason: str) -> str:
              prompt = f"""Dear customer,

              I have analyzed the CloudFormation failure reason provided: {reason}. The root cause appears to be <root_cause>. <explain analysis and reasoning>.
              
              To resolve this issue, I would suggest the following next steps:
              
                  <step 1>
                  <step 2>
                  <step 3>
              
              Please let me know if any of those steps need further clarification or if you have additional questions. I'm happy to provide more details if needed.
              
              Thank you, 
              
              Claude
              """
              return prompt


          def send_prompt(prompt: str): 
              prompt_config = {
                  "anthropic_version": "bedrock-2023-05-31",
                  "max_tokens": 4096,
                  "messages": [
                      {
                          "role": "user",
                          "content": [
                              {
                              "type": "text",
                              "text": prompt
                              }
                          ]
                      }
                  ]
              }

              body = json.dumps(prompt_config)

              modelId = "anthropic.claude-3-sonnet-20240229-v1:0"
              contentType = "application/json"
              accept = "application/json"
              response = bedrock.invoke_model(
                  body=body, modelId=modelId, accept=accept, contentType=contentType
              )
              response_body = json.loads(response.get("body").read())

              result = response_body.get("content")[0]["text"]
              return result

          # Create a function that send text to trigger sns
          def send_text(message: str):
              sns.publish(
                  TopicArn=TOPIC_ARN,
                  Message=message
              )
              return "SNS Successfully SENT"


          # Lambda handler
          def lambda_handler(event, context):
              reason = event["detail"]["status-details"]["status-reason"]
              prompt = create_prompt(reason)
              response = send_prompt(prompt)
              sns_response = send_text(response)
              return sns_response
      Layers:
        - !Ref LambdaBoto3Layer
      Environment:
        Variables:
          REGION: !Ref "AWS::Region"
          TOPIC_ARN: !Ref SNSEmailTopic
      Tags:
        - Key: project
          Value: troubleshooting-cloudformation-failures

# EventBridge Rule that triggers Lambda Function
  EventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "EventBridgeRule"
      State: "ENABLED"
      EventPattern:
        source:
          - "aws.cloudformation"
        detail-type:
          - "CloudFormation Stack Status Change"
        detail:
          status-details:
            status:
              - "CREATE_FAILED"
              - "UPDATE_FAILED"
              - "DELETE_FAILED"
      Targets:
        - Arn: !GetAtt LambdaFunction.Arn
          Id: "TargetFunctionV1"
        